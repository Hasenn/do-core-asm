use std::str::FromStr;
use lalrpop_util::ParseError;
use crate::instruction::{
    Instr,
    Register,
    Op
};

grammar;

pub File : Vec<Instr> = <Instruction*> => <>;


pub Instruction: Instr = {
    <op:OpCode> <o0:Register> <o1:Register> => Instr::RegRegOp(op, o0, o1),
    <op:OpCode> <o0:Register> <o1:Num> =>? Err(ParseError::User {
        error: "Instructions with numbers as arguments are not implemented"
    })
}

pub Register: Register = {
    <r:GPReg> => r,
    "RIP" => Register::RIP,
    "RFLAGS" => Register::RFLAGS
}

pub Num: u16 = {
    <n:HexNum> => n,
    <n:DecNum> => n,
    <n:BinNum> => n,
}

// Lexer

//  Nums
HexNum: u16 = <s:r"0x[0-9AaBbCcDdEeFf]{1,4}"> => {
    u16::from_str_radix(s.trim_start_matches("0x"),16).unwrap()
};
BinNum: u16 = <s:r"0b[01]{1,16}"> => {
    u16::from_str_radix(s.trim_start_matches("0b"),2).unwrap()
};
DecNum: u16 = <s:r"[0-9]+"> => {
    u16::from_str(s).unwrap()
};
//  Registers
GPReg: Register = <s:r"[rR][0-9]"> => Register::GeneralPurpose(u8::from_str(&s[1..]).unwrap());

OpCode: Op = <s:r"[a-zA-Z]+"> => Op::from_str(&s.to_uppercase()).unwrap();
// Comments
//   https://github.com/lalrpop/lalrpop/issues/49

match {
    r"\s*" => { }, 
    r"//[^\n\r]*[\n\r]*" => { }, // Skip `// comments`
    r";[^\n\r]*[\n\r]*" => { }, // Skip `; comments`
    
}  else {
    _
}